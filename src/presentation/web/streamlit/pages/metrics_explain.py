import streamlit as st
import requests
import pandas as pd

# Define la URL base de tu API
API_URL = "http://localhost:8000/models"

def render():
    """
    Renderiza la p√°gina de m√©tricas y explicabilidad del modelo.
    """
    st.header("üî¨ M√©tricas y Explicabilidad del Modelo")

    st.markdown("### 1. Rendimiento del Modelo (Certificado de Calibraci√≥n)")
    
    try:
        # Hacer la petici√≥n al endpoint de m√©tricas
        res = requests.get(f"{API_URL}/metrics")
        res.raise_for_status()  # Lanza un error si la petici√≥n falla
        metrics = res.json()
        
        # Mostrar las m√©tricas en columnas
        col1, col2 = st.columns(2)
        col1.metric("üéØ Precisi√≥n (Accuracy)", f"{metrics.get('accuracy', 0):.2%}")
        col2.metric("‚öñÔ∏è F1-Score", f"{metrics.get('f1_score', 0):.3f}")
        
        st.success("El **F1-Score > 0.85** demuestra que el modelo es cient√≠ficamente robusto, balanceando la detecci√≥n de planetas reales sin generar falsas alarmas.")

    except requests.exceptions.RequestException as e:
        st.error(f"No se pudieron cargar las m√©tricas. Aseg√∫rate de que el backend est√© funcionando. Error: {e}")

    st.markdown("---")
    st.markdown("### 2. Importancia de Caracter√≠sticas (Interpretaci√≥n F√≠sica)")
    st.markdown("Estas son las variables m√°s influyentes que el modelo utiliza para tomar sus decisiones.")

    try:
        # Hacer la petici√≥n al endpoint de importancia de caracter√≠sticas
        res = requests.get(f"{API_URL}/feature-importance")
        res.raise_for_status()
        importance_data = res.json().get("importance", {})
        
        if importance_data:
            # Convertir el diccionario a un DataFrame de Pandas (CLAVE PARA EL GR√ÅFICO)
            # Ordenar por importancia de forma descendente y tomar el top 10
            top_10_features = sorted(importance_data.items(), key=lambda item: item[1], reverse=True)[:10]
            
            df_importance = pd.DataFrame(top_10_features, columns=['Caracter√≠stica', 'Importancia'])
            
            st.info("Mostrando las 10 caracter√≠sticas m√°s predictivas.")
            st.bar_chart(df_importance.set_index('Caracter√≠stica'))
        else:
            st.warning("No hay datos de importancia de caracter√≠sticas disponibles.")

    except requests.exceptions.RequestException as e:
        st.error(f"No se pudo cargar la importancia de caracter√≠sticas. Error: {e}")